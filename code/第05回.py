# -*- coding: utf-8 -*-
"""第05回.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jzz-dNTw9i9-erlg2SFgPKY0TMVuje3e

# 2023年度機械学習Ⅰ（副専攻）第05回演習ファイル

## データの理解と前処理(1)　データ構造、データ尺度、記述統計、可視化

# 【おまけ】Colabでの作業について

ショートカットキーをある程度覚えておくと作業がはかどります

[Jupyter Notebookなどで最初に覚えておくと便利なショートカットキー - ガンマソフト株式会社](https://gammasoft.jp/blog/useful-shortcuts-for-jupyter-notebook/)

[【Google Colaboratory】作業が捗るショートカットキーを厳選して紹介！ | キカガクの技術ブログ](https://blog.kikagaku.co.jp/google-colaboratory-shortcut)

# 5-0　準備

よく用いるライブラリを最初にimportしておく。ライブラリのimportは、ライブラリの関数を使用する際に都度行っても問題はないが、何度も用いるものについては最初にまとめてimportしておくほうがスッキリする。
"""

# 必要なライブラリのimport（少なくともこれらは毎回読み込んでおくとよいでしょう）
import numpy as np    # Numpy（数値計算用のライブラリ）を読み込む（以降のプログラムではNumpyを「np」という名前で使用する）
import pandas as pd   # Pandas（データ分析用のライブラリ）を読み込む（以降のプログラムではPandasを「pd」という名前で使用する）

"""# 5-1　データの準備

前回と同じく、Irisデータを用いて「データの理解」に関する演習を行います。

## 5-1-1　データの読み込み
今回もWeb上（[UCI machine learning repository](https://archive.ics.uci.edu/ml/index.php)）にあるIrisデータをそのまま読み込んで、Pandasの機能を使って**データフレーム**に格納する。

以下は、前回とほぼ同じ。
"""

# データのありかを示すURLを文字列 s に入れる
# s = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'  # IrisのデータセットのURL（パス）　※2023/6/8現在、使えなくなっているようです
s = 'https://raw.githubusercontent.com/nkondo7/sample/main/iris.data'  # IrisのデータセットのURL（パス） ※こちらをお使いください

# UCI machine learning repositoryのデータには項目名のヘッダがないので、リストで用意しておく。
# （いきなりでよくわからないと思うので、とりあえず実行しておいてください）

# irisの項目名
feature_names = ['sepal_length',
                 'sepal_width',
                 'petal_length',
                 'petal_width',
                 'class']

# このように、Pythonでは、リストの要素や関数の引数などでの「,」での区切りごとに改行しても構いません。
# （そのほうが人間が見やすい場合はそうするとよい。）
# ちなみに、下のように書いても全く同じ動きをします。
# feature_names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class']

# Pandasのread_csvというCSVファイルを読み込む関数を使って、データを読み込む
# （dfという名前の「データフレーム」に入れることにする）
df = pd.read_csv(s,
                 header=None,
                 names=feature_names,
                 encoding='utf-8')

"""## 5-1-2　データの確認

（前回の再掲）データフレームの名前（ここでは「df」）をそのまま書いて実行すると、中身を出力できる。ただしデータの件数が多い場合は、最初と最後のそれぞれ5件ずつのみが表示される。
"""

df

"""いろいろと表示の仕方があるので、必要に応じて使い分けよう。"""

# 以下、「#」から始まる行はコメントアウトされているが、適当に「#」をつけ外しして、実行する行を変えていろいろ試してみよう

df.head() # 最初の5行のみ表示
#df.tail() #最後の5行のみ表示
#df.head(10) #最初の10行のみ表示

# データフレームの表示設定いろいろ（必要に応じてコメントを外して試してみよう）
#pd.set_option('display.max_rows', None)  #上限なしで表示
#pd.set_option('display.max_rows', 5)     #上限5つ
#pd.reset_option('display.max_rows')      #設定のリセット

"""データのいろいろな情報を表示する"""

df.info()  # データの情報を表示

# さまざまな情報を個別にも出せる
print('列数：', len(df.columns))
print('行数：', len(df))
print('（行数, 列数）：', df.shape)
print('データサイズ（行数×列数）：', df.size)

"""# 5-2　基本統計量

Pandasのデータフレームでは、descrive()メソッドで基本統計量を計算することができる。


"""

# 基本統計量を計算
df.describe()

# ちなみに以下のようにすると、（数値の列も含めて、文字列として扱うことになり、）unique（ユニークな値の個数）、top（最頻値）、freq（最頻値の出現回数）を確認することができる
df.astype('str').describe()

"""# 5-3　可視化

## 5-3-1　分布

### 5-3-1-1　ヒストグラム

量的変数の分布はヒストグラムを描くと把握しやすい。

ヒストグラムの描き方はいろいろあり、たとえばPandasデータフレームのplot.hist()メソッドがある。

（ビン（各階級）の幅の設定や、色の設定など、いろいろ可能。調べてみよう）
"""

df.plot.hist(alpha=0.5)   # すべての変数のヒストグラムが重ねて表示される（alphaは透過度）

"""変数ごとにヒストグラムをみたいときは、変数を指定する"""

df["sepal_length"].plot.hist()   # 指定した変数のヒストグラムが描ける

"""### 5-3-1-2　箱ひげ図

箱ひげ図は、Pandasデータフレームであれば plot.box()メソッドが使える

（これもさまざまな設定ができるので調べてみよう）
"""

df.plot.box()

"""## 5-3-2　相関

### 5-3-2-1　相関係数

Pandasデータフレームでは、corr()メソッドで相関係数行列が求められる

（データフレームにあるすべての量的変数の組合せについて相関係数を求めて表示する）
"""

df.corr()  # df.corr()で、データフレームdfにある変数について相関係数行列を求めることができる

"""特定の変数に絞って相関係数を表示することもできる"""

df_cr = df.corr()  # 相関係数行列の計算結果を新しいデータフレーム df_cr に入れる

print(df_cr['sepal_length'])  # 指定した変数について、全変数との相関係数を表示する

"""5-3-2-2　散布図

Pandasデータフレームでは、plot.scatter()メソッドで、指定した2変数の散布図が描ける
"""

df.plot.scatter(x='sepal_length', y='petal_length', alpha=0.5)  # xとyにそれぞれ変数名を指定する。alphaは透過度

"""## 5-3-3　seabornによる美しい可視化

seabornライブラリを使うと、さらに簡単に美しい可視化ができる
"""

# seabornをimportする
import seaborn as sns

"""箱ひげ図"""

sns.boxplot(data=df)

sns.boxplot(data=df[['sepal_length', 'sepal_width']])  # このようにすれば特定の変数のみを表示することもできる

"""バイオリンプロット"""

sns.violinplot(data=df, jitter=True, color='gray')

"""相関係数行列の計算とヒートマップ化

参考：https://note.nkmk.me/python-seaborn-heatmap/
"""

corr_mat = df.corr()  # 相関係数行列を計算して、その結果を corr_mat という新しい変数（データフレーム）に入れる
print(corr_mat)       # corr_matの中身を表示

# 相関係数行列をヒートマップとして表示
sns.heatmap(corr_mat,          # 表示したい相関係数行列のデータフレーム
            cmap='coolwarm',   # どのような色のセット（カラーマップ）で塗るか
            vmin=-1,           # ヒートマップの最小値
            vmax=1,            # ヒートマップの最大値
            annot=True)        # 数値をオーバーラップして表示させるか

"""散布図行列

参考：https://note.nkmk.me/python-seaborn-pandas-pairplot/
"""

pg = sns.pairplot(df, hue="class")   # hue引数に変数を指定すると、その変数の値によって色分けができる

"""特定の変数のみで描くこともできる"""

sns.pairplot(df, hue='class',
             vars=['sepal_length', 'sepal_width'])  # 表示したい変数をvarsにリストで与える

sns.pairplot(df, hue='class',
             x_vars=['sepal_length', 'sepal_width'],   # x軸とy軸で表示させる変数を別々に指定したい場合はこのようにそれぞれリストで与える
             y_vars=['petal_length', 'petal_width'])






